{"version":3,"sources":["generated/graphql.tsx","components/LaunchList/LaunchList.tsx","components/LaunchList/index.tsx","components/LaunchProfile/LaunchProfile.tsx","components/LaunchProfile/index.tsx","App.tsx","index.tsx"],"names":["CacheControlScope","CapsuleRange","LaunchRange","Order","LaunchListDocument","gql","LaunchProfileDocument","LaunchList","data","handleIdChange","className","launches","map","launch","i","key","onClick","flight_number","mission_name","launch_year","LaunchListContainer","props","baseOptions","ApolloReactHooks","error","loading","LaunchProfile","launch_success","rocket","rocket_name","rocket_type","details","links","flickr_images","image","src","alt","LaunchProfileContainer","id","variables","String","refetch","React","App","useState","setId","useCallback","newId","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"0PA0BYA,EAmBAC,EAwMAC,EAmIAC,E,+qBA9VAH,K,gBAAAA,E,mBAAAA,M,cAmBAC,K,YAAAA,E,qBAAAA,M,cAwMAC,K,gBAAAA,E,YAAAA,E,YAAAA,E,qBAAAA,M,cAmIAC,K,UAAAA,E,aAAAA,M,KA+YL,IAAMC,EAAqBC,IAAH,KAmDxB,IAAMC,EAAwBD,IAAH,K,UCxxBnBE,EApBqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,eAAT,OAClC,uBAAKC,UAHW,cAId,sBAAIA,UAAS,UAJC,aAID,aACRF,EAAKG,UACNH,EAAKG,SAASC,KACZ,SAACC,EAAQC,GAAT,QACED,GACA,sBACEE,IAAKD,EACLJ,UAAS,UAXL,aAWK,UACTM,QAAS,kBAAMP,EAAeI,EAAOI,iBAEpCJ,EAAOK,aALV,KAK0BL,EAAOM,YALjC,WCDGC,EAda,SAACC,GAAoB,IF2yBdC,EE3yBa,EF4yBjCC,IAAqEnB,EAAoBkB,GE3yB9Fd,EADsC,EACtCA,KAAMgB,EADgC,EAChCA,MAEd,OAH8C,EACzBC,QAGZ,yCAGLD,IAAUhB,EACL,oCAGF,gBAAC,EAAD,eAAYA,KAAMA,GAAUa,KCyBtBK,G,MAhCwB,SAAC,GAAc,IAAZlB,EAAW,EAAXA,KACxC,OAAKA,EAAKK,OAKR,uBAAKH,UARS,iBASZ,uBAAKA,UAAS,UATF,gBASE,aACZ,sCAAcF,EAAKK,OAAOI,cAA1B,MACCT,EAAKK,OAAOc,eACX,wBAAMjB,UAAS,UAZP,gBAYO,cAAf,WAEA,wBAAMA,UAAS,UAdP,gBAcO,aAAf,WAGJ,sBAAIA,UAAS,UAjBD,gBAiBC,YACVF,EAAKK,OAAOK,aACZV,EAAKK,OAAOe,QAAZ,YACMpB,EAAKK,OAAOe,OAAOC,YADzB,cAC0CrB,EAAKK,OAAOe,OAAOE,YAD7D,MAGH,qBAAGpB,UAAS,UAtBA,gBAsBA,kBAAgCF,EAAKK,OAAOkB,WACrDvB,EAAKK,OAAOmB,SAAWxB,EAAKK,OAAOmB,MAAMC,eAC1C,uBAAKvB,UAAS,UAxBJ,gBAwBI,iBACXF,EAAKK,OAAOmB,MAAMC,cAAcrB,KAAI,SAAAsB,GAAK,OACxCA,EAAQ,uBAAKC,IAAKD,EAAOxB,UAAS,UA1B5B,gBA0B4B,WAAyBK,IAAKmB,EAAOE,IAAI,WAAc,UAtB1F,oDCoBIC,EAxBgB,SAAC,GAAsB,IJy2BhBf,EIz2BJgB,EAAmB,EAAnBA,GAAmB,GJy2BfhB,EIx2B4B,CAC9DiB,UAAW,CAAED,GAAIE,OAAOF,KJw2Bbf,IAA2EjB,EAAuBgB,IIz2BvGd,EAD2C,EAC3CA,KAAMgB,EADqC,EACrCA,MAAOC,EAD8B,EAC9BA,QAASgB,EADqB,EACrBA,QAQ9B,OAJAC,aAAgB,WACdD,MACC,CAACH,IAEAb,EACK,yCAGLD,EACK,oCAGJhB,EAIE,gBAAC,EAAD,CAAeA,KAAMA,IAHnB,8DCRImC,G,MAbH,WAAO,IAAD,EACID,IAAME,SAAS,IADnB,mBACTN,EADS,KACLO,EADK,KAEVpC,EAAiBiC,IAAMI,aAAY,SAAAC,GACvCF,EAAME,KACL,IAEH,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,CAAYD,eAAgBA,IAC5B,kBAAC,EAAD,CAAe6B,GAAIA,OCNnBU,EAAS,IAAIC,IAAa,CAC9BC,IAAK,6CAGPC,IAASC,OACP,kBAAC,IAAD,CAAgBJ,OAAQA,GACtB,kBAAC,IAAD,CAAqBA,OAAQA,GAC3B,kBAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.d9f4ec42.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any,\n};\n\n\nexport type BasicMission = {\n   __typename?: 'BasicMission',\n  name?: Maybe<Scalars['String']>,\n  flight?: Maybe<Scalars['Int']>,\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type Capsule = {\n   __typename?: 'Capsule',\n  capsule_serial?: Maybe<Scalars['String']>,\n  capsule_id?: Maybe<Scalars['String']>,\n  status?: Maybe<Scalars['String']>,\n  original_launch?: Maybe<Scalars['String']>,\n  original_launch_unix?: Maybe<Scalars['Float']>,\n  missions?: Maybe<Array<Maybe<BasicMission>>>,\n  landings?: Maybe<Scalars['Int']>,\n  type?: Maybe<Scalars['String']>,\n  details?: Maybe<Scalars['String']>,\n  reuse_count?: Maybe<Scalars['Int']>,\n};\n\nexport enum CapsuleRange {\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport type Core = {\n   __typename?: 'Core',\n  core_serial?: Maybe<Scalars['String']>,\n  block?: Maybe<Scalars['Int']>,\n  status?: Maybe<Scalars['String']>,\n  original_launch?: Maybe<Scalars['String']>,\n  original_launch_unix?: Maybe<Scalars['Float']>,\n  missions?: Maybe<Array<Maybe<BasicMission>>>,\n  reuse_count?: Maybe<Scalars['Int']>,\n  rtls_attempts?: Maybe<Scalars['Int']>,\n  rtls_landings?: Maybe<Scalars['Int']>,\n  asds_attempts?: Maybe<Scalars['Int']>,\n  asds_landings?: Maybe<Scalars['Int']>,\n  water_landing?: Maybe<Scalars['Boolean']>,\n  details?: Maybe<Scalars['String']>,\n};\n\nexport type Dimension = {\n   __typename?: 'Dimension',\n  meters?: Maybe<Scalars['Float']>,\n  feet?: Maybe<Scalars['Float']>,\n};\n\nexport type Dragon = {\n   __typename?: 'Dragon',\n  id?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  type?: Maybe<Scalars['String']>,\n  active?: Maybe<Scalars['Boolean']>,\n  crew_capacity?: Maybe<Scalars['Int']>,\n  sidewall_angle_deg?: Maybe<Scalars['Int']>,\n  orbit_duration_yr?: Maybe<Scalars['Int']>,\n  dry_mass_kg?: Maybe<Scalars['Int']>,\n  dry_mass_lb?: Maybe<Scalars['Int']>,\n  first_flight?: Maybe<Scalars['String']>,\n  heat_shield?: Maybe<HeatShield>,\n  thrusters?: Maybe<Array<Maybe<Thruster>>>,\n  launch_payload_mass?: Maybe<Mass>,\n  launch_payload_vol?: Maybe<PayloadVolume>,\n  return_payload_mass?: Maybe<Mass>,\n  return_payload_vol?: Maybe<PayloadVolume>,\n  pressurized_capsule?: Maybe<PressurizedCapsule>,\n  trunk?: Maybe<Trunk>,\n  height_w_trunk?: Maybe<Dimension>,\n  diameter?: Maybe<Dimension>,\n  wikipedia?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n};\n\nexport type Engines = {\n   __typename?: 'Engines',\n  number?: Maybe<Scalars['Int']>,\n  type?: Maybe<Scalars['String']>,\n  version?: Maybe<Scalars['String']>,\n  layout?: Maybe<Scalars['String']>,\n  engine_loss_max?: Maybe<Scalars['Int']>,\n  propellant_1?: Maybe<Scalars['String']>,\n  propellant_2?: Maybe<Scalars['String']>,\n  thrust_sea_level?: Maybe<Thrust>,\n  thrust_vacuum?: Maybe<Thrust>,\n  thrust_to_weight?: Maybe<Scalars['Float']>,\n};\n\nexport type Fairing = {\n   __typename?: 'Fairing',\n  height?: Maybe<Dimension>,\n  diameter?: Maybe<Dimension>,\n};\n\nexport type Headquarters = {\n   __typename?: 'Headquarters',\n  address?: Maybe<Scalars['String']>,\n  city?: Maybe<Scalars['String']>,\n  state?: Maybe<Scalars['String']>,\n};\n\nexport type HeatShield = {\n   __typename?: 'HeatShield',\n  material?: Maybe<Scalars['String']>,\n  size_meters?: Maybe<Scalars['Float']>,\n  temp_degrees?: Maybe<Scalars['Int']>,\n  dev_partner?: Maybe<Scalars['String']>,\n};\n\nexport type History = {\n   __typename?: 'History',\n  id?: Maybe<Scalars['Int']>,\n  title?: Maybe<Scalars['String']>,\n  event_date_utc?: Maybe<Scalars['String']>,\n  event_date_unix?: Maybe<Scalars['Float']>,\n  flight_number?: Maybe<Scalars['Int']>,\n  details?: Maybe<Scalars['String']>,\n  links?: Maybe<HistoryLinks>,\n};\n\nexport type HistoryLinks = {\n   __typename?: 'HistoryLinks',\n  article?: Maybe<Scalars['String']>,\n  reddit?: Maybe<Scalars['String']>,\n  wikipedia?: Maybe<Scalars['String']>,\n};\n\nexport type Info = {\n   __typename?: 'Info',\n  name?: Maybe<Scalars['String']>,\n  founder?: Maybe<Scalars['String']>,\n  founded?: Maybe<Scalars['Int']>,\n  employees?: Maybe<Scalars['Int']>,\n  vehicles?: Maybe<Scalars['Int']>,\n  launch_sites?: Maybe<Scalars['Int']>,\n  test_sites?: Maybe<Scalars['Int']>,\n  ceo?: Maybe<Scalars['String']>,\n  cto?: Maybe<Scalars['String']>,\n  coo?: Maybe<Scalars['String']>,\n  cto_propulsion?: Maybe<Scalars['String']>,\n  valuation?: Maybe<Scalars['Float']>,\n  headquarters?: Maybe<Headquarters>,\n  summary?: Maybe<Scalars['String']>,\n};\n\nexport type LandingLegs = {\n   __typename?: 'LandingLegs',\n  number?: Maybe<Scalars['Int']>,\n  material?: Maybe<Scalars['String']>,\n};\n\nexport type Landingpad = {\n   __typename?: 'Landingpad',\n  id?: Maybe<Scalars['String']>,\n  full_name?: Maybe<Scalars['String']>,\n  status?: Maybe<Scalars['String']>,\n  location?: Maybe<Location>,\n  landing_type?: Maybe<Scalars['String']>,\n  attempted_landings?: Maybe<Scalars['Int']>,\n  successful_landings?: Maybe<Scalars['Int']>,\n  wikipedia?: Maybe<Scalars['String']>,\n  details?: Maybe<Scalars['String']>,\n};\n\nexport type Launch = {\n   __typename?: 'Launch',\n  flight_number?: Maybe<Scalars['Int']>,\n  mission_id?: Maybe<Array<Maybe<Scalars['String']>>>,\n  mission_name?: Maybe<Scalars['String']>,\n  launch_year?: Maybe<Scalars['Int']>,\n  launch_date_unix?: Maybe<Scalars['Float']>,\n  launch_date_utc?: Maybe<Scalars['String']>,\n  launch_date_local?: Maybe<Scalars['String']>,\n  is_tentative?: Maybe<Scalars['Boolean']>,\n  tentative_max_precision?: Maybe<Scalars['String']>,\n  tbd?: Maybe<Scalars['Boolean']>,\n  launch_window?: Maybe<Scalars['Int']>,\n  rocket?: Maybe<LaunchRocket>,\n  ships?: Maybe<Array<Maybe<Scalars['String']>>>,\n  telemetry?: Maybe<LaunchTelemetry>,\n  launch_site?: Maybe<LaunchSite>,\n  launch_success?: Maybe<Scalars['Boolean']>,\n  links?: Maybe<LaunchLinks>,\n  details?: Maybe<Scalars['String']>,\n  upcoming?: Maybe<Scalars['Boolean']>,\n  static_fire_date_utc?: Maybe<Scalars['String']>,\n  static_fire_date_unix?: Maybe<Scalars['Float']>,\n  timeline?: Maybe<LaunchTimeline>,\n};\n\nexport type LaunchLinks = {\n   __typename?: 'LaunchLinks',\n  mission_patch?: Maybe<Scalars['String']>,\n  mission_patch_small?: Maybe<Scalars['String']>,\n  reddit_campaign?: Maybe<Scalars['String']>,\n  reddit_launch?: Maybe<Scalars['String']>,\n  reddit_recovery?: Maybe<Scalars['String']>,\n  reddit_media?: Maybe<Scalars['String']>,\n  presskit?: Maybe<Scalars['String']>,\n  article_link?: Maybe<Scalars['String']>,\n  wikipedia?: Maybe<Scalars['String']>,\n  video_link?: Maybe<Scalars['String']>,\n  youtube_id?: Maybe<Scalars['String']>,\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>,\n};\n\nexport type Launchpad = {\n   __typename?: 'Launchpad',\n  id?: Maybe<Scalars['Int']>,\n  status?: Maybe<Scalars['String']>,\n  location?: Maybe<Location>,\n  vehicles_launched?: Maybe<Array<Maybe<Scalars['String']>>>,\n  attempted_launches?: Maybe<Scalars['Int']>,\n  successful_launches?: Maybe<Scalars['Int']>,\n  wikipedia?: Maybe<Scalars['String']>,\n  details?: Maybe<Scalars['String']>,\n  site_id?: Maybe<Scalars['String']>,\n  site_name_long?: Maybe<Scalars['String']>,\n};\n\nexport enum LaunchRange {\n  Latest = 'latest',\n  Next = 'next',\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport type LaunchRocket = {\n   __typename?: 'LaunchRocket',\n  rocket_id?: Maybe<Scalars['String']>,\n  rocket_name?: Maybe<Scalars['String']>,\n  rocket_type?: Maybe<Scalars['String']>,\n  first_stage?: Maybe<LaunchRocketFirstStage>,\n  second_stage?: Maybe<LaunchRocketSecondStage>,\n  fairings?: Maybe<LaunchRocketFairings>,\n};\n\nexport type LaunchRocketFairings = {\n   __typename?: 'LaunchRocketFairings',\n  reused?: Maybe<Scalars['Boolean']>,\n  recovery_attempt?: Maybe<Scalars['Boolean']>,\n  recovered?: Maybe<Scalars['Boolean']>,\n  ship?: Maybe<Scalars['String']>,\n};\n\nexport type LaunchRocketFirstStage = {\n   __typename?: 'LaunchRocketFirstStage',\n  cores?: Maybe<Array<Maybe<LaunchRocketFirstStageCore>>>,\n};\n\nexport type LaunchRocketFirstStageCore = {\n   __typename?: 'LaunchRocketFirstStageCore',\n  core_serial?: Maybe<Scalars['String']>,\n  flight?: Maybe<Scalars['Int']>,\n  block?: Maybe<Scalars['Int']>,\n  gridfins?: Maybe<Scalars['Boolean']>,\n  legs?: Maybe<Scalars['Boolean']>,\n  reused?: Maybe<Scalars['Boolean']>,\n  land_success?: Maybe<Scalars['Boolean']>,\n  landing_intent?: Maybe<Scalars['Boolean']>,\n  landing_type?: Maybe<Scalars['String']>,\n  landing_vehicle?: Maybe<Scalars['String']>,\n};\n\nexport type LaunchRocketSecondStage = {\n   __typename?: 'LaunchRocketSecondStage',\n  block?: Maybe<Scalars['Int']>,\n  payloads?: Maybe<Array<Maybe<Payload>>>,\n};\n\nexport type LaunchSite = {\n   __typename?: 'LaunchSite',\n  site_id?: Maybe<Scalars['String']>,\n  site_name?: Maybe<Scalars['String']>,\n  site_name_long?: Maybe<Scalars['String']>,\n};\n\nexport type LaunchTelemetry = {\n   __typename?: 'LaunchTelemetry',\n  flight_club?: Maybe<Scalars['String']>,\n};\n\nexport type LaunchTimeline = {\n   __typename?: 'LaunchTimeline',\n  webcast_liftoff?: Maybe<Scalars['Int']>,\n  go_for_prop_loading?: Maybe<Scalars['Int']>,\n  rp1_loading?: Maybe<Scalars['Int']>,\n  stage1_rp1_loading?: Maybe<Scalars['Int']>,\n  stage1_lox_loading?: Maybe<Scalars['Int']>,\n  stage2_rp1_loading?: Maybe<Scalars['Int']>,\n  stage2_lox_loading?: Maybe<Scalars['Int']>,\n  engine_chill?: Maybe<Scalars['Int']>,\n  prelaunch_checks?: Maybe<Scalars['Int']>,\n  propellant_pressurization?: Maybe<Scalars['Int']>,\n  go_for_launch?: Maybe<Scalars['Int']>,\n  ignition?: Maybe<Scalars['Int']>,\n  liftoff?: Maybe<Scalars['Int']>,\n  maxq?: Maybe<Scalars['Int']>,\n  beco?: Maybe<Scalars['Int']>,\n  side_core_sep?: Maybe<Scalars['Int']>,\n  side_core_boostback?: Maybe<Scalars['Int']>,\n  meco?: Maybe<Scalars['Int']>,\n  stage_sep?: Maybe<Scalars['Int']>,\n  center_stage_sep?: Maybe<Scalars['Int']>,\n  second_stage_ignition?: Maybe<Scalars['Int']>,\n  center_core_boostback?: Maybe<Scalars['Int']>,\n  fairing_deploy?: Maybe<Scalars['Int']>,\n  first_stage_entry_burn?: Maybe<Scalars['Int']>,\n  side_core_entry_burn?: Maybe<Scalars['Int']>,\n  center_core_entry_burn?: Maybe<Scalars['Int']>,\n  seco_1?: Maybe<Scalars['Int']>,\n  first_stage_landing_burn?: Maybe<Scalars['Int']>,\n  first_stage_landing?: Maybe<Scalars['Int']>,\n  side_core_landing?: Maybe<Scalars['Int']>,\n  center_core_landing?: Maybe<Scalars['Int']>,\n  second_stage_restart?: Maybe<Scalars['Int']>,\n  seco_2?: Maybe<Scalars['Int']>,\n  payload_deploy?: Maybe<Scalars['Int']>,\n  payload_deploy_1?: Maybe<Scalars['Int']>,\n  payload_deploy_2?: Maybe<Scalars['Int']>,\n  dragon_separation?: Maybe<Scalars['Int']>,\n  dragon_solar_deploy?: Maybe<Scalars['Int']>,\n  dragon_bay_door_deploy?: Maybe<Scalars['Int']>,\n};\n\nexport type Location = {\n   __typename?: 'Location',\n  name?: Maybe<Scalars['String']>,\n  region?: Maybe<Scalars['String']>,\n  latitude?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n};\n\nexport type Mass = {\n   __typename?: 'Mass',\n  kg?: Maybe<Scalars['Int']>,\n  lb?: Maybe<Scalars['Int']>,\n};\n\nexport type Mission = {\n   __typename?: 'Mission',\n  mission_name?: Maybe<Scalars['String']>,\n  mission_id?: Maybe<Scalars['String']>,\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>,\n  payload_ids?: Maybe<Array<Maybe<Scalars['String']>>>,\n  wikipedia?: Maybe<Scalars['String']>,\n  website?: Maybe<Scalars['String']>,\n  twitter?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n};\n\nexport enum Order {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type Payload = {\n   __typename?: 'Payload',\n  payload_id?: Maybe<Scalars['String']>,\n  norad_id?: Maybe<Array<Maybe<Scalars['String']>>>,\n  cap_serial?: Maybe<Scalars['String']>,\n  reused?: Maybe<Scalars['Boolean']>,\n  customers?: Maybe<Array<Maybe<Scalars['String']>>>,\n  nationality?: Maybe<Scalars['String']>,\n  manufacturer?: Maybe<Scalars['String']>,\n  payload_type?: Maybe<Scalars['String']>,\n  payload_mass_kg?: Maybe<Scalars['Float']>,\n  payload_mass_lbs?: Maybe<Scalars['Float']>,\n  orbit?: Maybe<Scalars['String']>,\n  orbit_params?: Maybe<PayloadOrbitParams>,\n  mass_returned_kg?: Maybe<Scalars['Float']>,\n  mass_returned_lbs?: Maybe<Scalars['Float']>,\n  flight_time_sec?: Maybe<Scalars['Int']>,\n  cargo_manifest?: Maybe<Scalars['String']>,\n};\n\nexport type PayloadOrbitParams = {\n   __typename?: 'PayloadOrbitParams',\n  reference_system?: Maybe<Scalars['String']>,\n  regime?: Maybe<Scalars['String']>,\n  longitude?: Maybe<Scalars['Float']>,\n  semi_major_axis_km?: Maybe<Scalars['Float']>,\n  eccentricity?: Maybe<Scalars['Float']>,\n  periapsis_km?: Maybe<Scalars['Float']>,\n  apoapsis_km?: Maybe<Scalars['Float']>,\n  inclination_deg?: Maybe<Scalars['Float']>,\n  period_min?: Maybe<Scalars['Float']>,\n  lifespan_years?: Maybe<Scalars['Float']>,\n  epoch?: Maybe<Scalars['String']>,\n  mean_motion?: Maybe<Scalars['Float']>,\n  raan?: Maybe<Scalars['Float']>,\n  arg_of_pericenter?: Maybe<Scalars['Float']>,\n  mean_anomaly?: Maybe<Scalars['Float']>,\n};\n\nexport type PayloadVolume = {\n   __typename?: 'PayloadVolume',\n  cubic_meters?: Maybe<Scalars['Int']>,\n  cubic_feet?: Maybe<Scalars['Int']>,\n};\n\nexport type Position = {\n   __typename?: 'Position',\n  latitude?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n};\n\nexport type PressurizedCapsule = {\n   __typename?: 'PressurizedCapsule',\n  payload_volume?: Maybe<PayloadVolume>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  capsule?: Maybe<Capsule>,\n  capsules?: Maybe<Array<Maybe<Capsule>>>,\n  core?: Maybe<Core>,\n  cores?: Maybe<Array<Maybe<Core>>>,\n  dragon?: Maybe<Dragon>,\n  dragons?: Maybe<Array<Maybe<Dragon>>>,\n  history?: Maybe<Array<Maybe<History>>>,\n  info?: Maybe<Info>,\n  landingpad?: Maybe<Landingpad>,\n  landingpads?: Maybe<Array<Maybe<Landingpad>>>,\n  launch?: Maybe<Launch>,\n  launches?: Maybe<Array<Maybe<Launch>>>,\n  launchpad?: Maybe<Launchpad>,\n  launchpads?: Maybe<Array<Maybe<Launchpad>>>,\n  mission?: Maybe<Mission>,\n  missions?: Maybe<Array<Maybe<Mission>>>,\n  payload?: Maybe<Payload>,\n  payloads?: Maybe<Array<Maybe<Payload>>>,\n  roadster?: Maybe<Roadster>,\n  rocket?: Maybe<Rocket>,\n  rockets?: Maybe<Array<Maybe<Rocket>>>,\n  ship?: Maybe<Ship>,\n  ships?: Maybe<Array<Maybe<Ship>>>,\n};\n\n\nexport type QueryCapsuleArgs = {\n  capsule_serial: Scalars['String']\n};\n\n\nexport type QueryCapsulesArgs = {\n  range?: Maybe<CapsuleRange>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Order>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryCoreArgs = {\n  core_serial: Scalars['String']\n};\n\n\nexport type QueryCoresArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Order>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryDragonArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryDragonsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryHistoryArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Order>,\n  sort?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryLandingpadArgs = {\n  id?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryLandingpadsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryLaunchArgs = {\n  id?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryLaunchesArgs = {\n  range?: Maybe<LaunchRange>,\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Order>,\n  sort?: Maybe<Scalars['String']>,\n  ids?: Maybe<Array<Maybe<Scalars['String']>>>\n};\n\n\nexport type QueryLaunchpadArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryLaunchpadsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryMissionArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryMissionsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryPayloadArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryPayloadsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Order>,\n  sort?: Maybe<Scalars['String']>\n};\n\n\nexport type QueryRocketArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryRocketsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryShipArgs = {\n  id: Scalars['String']\n};\n\n\nexport type QueryShipsArgs = {\n  limit?: Maybe<Scalars['Int']>,\n  offset?: Maybe<Scalars['Int']>,\n  order?: Maybe<Order>,\n  sort?: Maybe<Scalars['String']>\n};\n\nexport type Roadster = {\n   __typename?: 'Roadster',\n  name: Scalars['String'],\n  launch_date_utc?: Maybe<Scalars['String']>,\n  launch_date_unix?: Maybe<Scalars['Float']>,\n  launch_mass_kg?: Maybe<Scalars['Int']>,\n  launch_mass_lbs?: Maybe<Scalars['Int']>,\n  norad_id?: Maybe<Scalars['Int']>,\n  epoch_jd?: Maybe<Scalars['Float']>,\n  orbit_type?: Maybe<Scalars['String']>,\n  apoapsis_au?: Maybe<Scalars['Float']>,\n  semi_major_axis_au?: Maybe<Scalars['Float']>,\n  eccentricity?: Maybe<Scalars['Float']>,\n  inclination?: Maybe<Scalars['Float']>,\n  longitude?: Maybe<Scalars['Float']>,\n  periapsis_arg?: Maybe<Scalars['Float']>,\n  period_days?: Maybe<Scalars['Float']>,\n  speed_kph?: Maybe<Scalars['Float']>,\n  speed_mph?: Maybe<Scalars['Float']>,\n  earth_distance_km?: Maybe<Scalars['Float']>,\n  earth_distance_mi?: Maybe<Scalars['Float']>,\n  mars_distance_km?: Maybe<Scalars['Float']>,\n  mars_distance_mi?: Maybe<Scalars['Float']>,\n  wikipedia?: Maybe<Scalars['String']>,\n  details?: Maybe<Scalars['String']>,\n};\n\nexport type Rocket = {\n   __typename?: 'Rocket',\n  id?: Maybe<Scalars['Int']>,\n  active?: Maybe<Scalars['Boolean']>,\n  stages?: Maybe<Scalars['Int']>,\n  boosters?: Maybe<Scalars['Int']>,\n  cost_per_launch?: Maybe<Scalars['Int']>,\n  success_rate_pct?: Maybe<Scalars['Float']>,\n  first_flight?: Maybe<Scalars['String']>,\n  country?: Maybe<Scalars['String']>,\n  company?: Maybe<Scalars['String']>,\n  height?: Maybe<Dimension>,\n  diameter?: Maybe<Dimension>,\n  mass?: Maybe<Mass>,\n  payload_weights?: Maybe<Array<Maybe<RocketPayloadWeight>>>,\n  first_stage?: Maybe<RocketFirstStage>,\n  second_stage?: Maybe<RocketSecondStage>,\n  engines?: Maybe<Engines>,\n  landing_legs?: Maybe<LandingLegs>,\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>,\n  wikipedia?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n  rocket_id?: Maybe<Scalars['String']>,\n  rocket_name?: Maybe<Scalars['String']>,\n  rocket_type?: Maybe<Scalars['String']>,\n};\n\nexport type RocketFirstStage = {\n   __typename?: 'RocketFirstStage',\n  reusable?: Maybe<Scalars['Boolean']>,\n  engines?: Maybe<Scalars['Int']>,\n  fuel_amount_tons?: Maybe<Scalars['Float']>,\n  burn_time_sec?: Maybe<Scalars['Int']>,\n  thrust_sea_level?: Maybe<Thrust>,\n  thrust_vacuum?: Maybe<Thrust>,\n};\n\nexport type RocketPayload = {\n   __typename?: 'RocketPayload',\n  option_1?: Maybe<Scalars['String']>,\n  option_2?: Maybe<Scalars['String']>,\n  composite_fairing?: Maybe<Fairing>,\n};\n\nexport type RocketPayloadWeight = {\n   __typename?: 'RocketPayloadWeight',\n  id?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  kg?: Maybe<Scalars['Float']>,\n  lb?: Maybe<Scalars['Float']>,\n};\n\nexport type RocketSecondStage = {\n   __typename?: 'RocketSecondStage',\n  engines?: Maybe<Scalars['Int']>,\n  fuel_amount_tons?: Maybe<Scalars['Float']>,\n  burn_time_sec?: Maybe<Scalars['Int']>,\n  thrust?: Maybe<Thrust>,\n  payloads?: Maybe<RocketPayload>,\n};\n\nexport type Ship = {\n   __typename?: 'Ship',\n  ship_id?: Maybe<Scalars['String']>,\n  ship_name?: Maybe<Scalars['String']>,\n  ship_model?: Maybe<Scalars['String']>,\n  ship_type?: Maybe<Scalars['String']>,\n  roles?: Maybe<Array<Maybe<Scalars['String']>>>,\n  active?: Maybe<Scalars['Boolean']>,\n  imo?: Maybe<Scalars['Int']>,\n  mmsi?: Maybe<Scalars['Int']>,\n  abs?: Maybe<Scalars['Int']>,\n  class?: Maybe<Scalars['Int']>,\n  weight_lbs?: Maybe<Scalars['Float']>,\n  weight_kg?: Maybe<Scalars['Float']>,\n  year_built?: Maybe<Scalars['Int']>,\n  home_port?: Maybe<Scalars['String']>,\n  status?: Maybe<Scalars['String']>,\n  speed_kn?: Maybe<Scalars['Float']>,\n  course_deg?: Maybe<Scalars['Float']>,\n  position?: Maybe<Position>,\n  successful_landings?: Maybe<Scalars['Int']>,\n  attempted_landings?: Maybe<Scalars['Int']>,\n  missions?: Maybe<Array<Maybe<BasicMission>>>,\n  url?: Maybe<Scalars['String']>,\n  image?: Maybe<Scalars['String']>,\n};\n\nexport type Thrust = {\n   __typename?: 'Thrust',\n  kN?: Maybe<Scalars['Float']>,\n  lbf?: Maybe<Scalars['Float']>,\n};\n\nexport type Thruster = {\n   __typename?: 'Thruster',\n  type?: Maybe<Scalars['String']>,\n  amount?: Maybe<Scalars['Int']>,\n  pods?: Maybe<Scalars['Int']>,\n  fuel_1?: Maybe<Scalars['String']>,\n  fuel_2?: Maybe<Scalars['String']>,\n  thrust?: Maybe<Thrust>,\n};\n\nexport type Trunk = {\n   __typename?: 'Trunk',\n  trunk_volume?: Maybe<PayloadVolume>,\n  cargo?: Maybe<TrunkCargo>,\n};\n\nexport type TrunkCargo = {\n   __typename?: 'TrunkCargo',\n  solar_array?: Maybe<Scalars['Int']>,\n  unpressurized_cargo?: Maybe<Scalars['Boolean']>,\n};\n\n\nexport type LaunchListQueryVariables = {};\n\n\nexport type LaunchListQuery = (\n  { __typename?: 'Query' }\n  & { launches: Maybe<Array<Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_year'>\n  )>>> }\n);\n\nexport type LaunchProfileQueryVariables = {\n  id: Scalars['String']\n};\n\n\nexport type LaunchProfileQuery = (\n  { __typename?: 'Query' }\n  & { launch: Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_year' | 'launch_success' | 'details'>\n    & { launch_site: Maybe<(\n      { __typename?: 'LaunchSite' }\n      & Pick<LaunchSite, 'site_name'>\n    )>, rocket: Maybe<(\n      { __typename?: 'LaunchRocket' }\n      & Pick<LaunchRocket, 'rocket_name' | 'rocket_type'>\n    )>, links: Maybe<(\n      { __typename?: 'LaunchLinks' }\n      & Pick<LaunchLinks, 'flickr_images'>\n    )> }\n  )> }\n);\n\n\nexport const LaunchListDocument = gql`\n    query LaunchList {\n  launches {\n    flight_number\n    mission_name\n    launch_year\n  }\n}\n    `;\nexport type LaunchListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LaunchListQuery, LaunchListQueryVariables>, 'query'>;\n\n    export const LaunchListComponent = (props: LaunchListComponentProps) => (\n      <ApolloReactComponents.Query<LaunchListQuery, LaunchListQueryVariables> query={LaunchListDocument} {...props} />\n    );\n    \nexport type LaunchListProps<TChildProps = {}> = ApolloReactHoc.DataProps<LaunchListQuery, LaunchListQueryVariables> | TChildProps;\nexport function withLaunchList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LaunchListQuery,\n  LaunchListQueryVariables,\n  LaunchListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, LaunchListQuery, LaunchListQueryVariables, LaunchListProps<TChildProps>>(LaunchListDocument, {\n      alias: 'launchList',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLaunchListQuery__\n *\n * To run a query within a React component, call `useLaunchListQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchListQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLaunchListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LaunchListQuery, LaunchListQueryVariables>) {\n        return ApolloReactHooks.useQuery<LaunchListQuery, LaunchListQueryVariables>(LaunchListDocument, baseOptions);\n      }\nexport function useLaunchListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LaunchListQuery, LaunchListQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<LaunchListQuery, LaunchListQueryVariables>(LaunchListDocument, baseOptions);\n        }\nexport type LaunchListQueryHookResult = ReturnType<typeof useLaunchListQuery>;\nexport type LaunchListLazyQueryHookResult = ReturnType<typeof useLaunchListLazyQuery>;\nexport type LaunchListQueryResult = ApolloReactCommon.QueryResult<LaunchListQuery, LaunchListQueryVariables>;\nexport const LaunchProfileDocument = gql`\n    query LaunchProfile($id: String!) {\n  launch(id: $id) {\n    flight_number\n    mission_name\n    launch_year\n    launch_success\n    details\n    launch_site {\n      site_name\n    }\n    rocket {\n      rocket_name\n      rocket_type\n    }\n    links {\n      flickr_images\n    }\n  }\n}\n    `;\nexport type LaunchProfileComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LaunchProfileQuery, LaunchProfileQueryVariables>, 'query'> & ({ variables: LaunchProfileQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const LaunchProfileComponent = (props: LaunchProfileComponentProps) => (\n      <ApolloReactComponents.Query<LaunchProfileQuery, LaunchProfileQueryVariables> query={LaunchProfileDocument} {...props} />\n    );\n    \nexport type LaunchProfileProps<TChildProps = {}> = ApolloReactHoc.DataProps<LaunchProfileQuery, LaunchProfileQueryVariables> | TChildProps;\nexport function withLaunchProfile<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LaunchProfileQuery,\n  LaunchProfileQueryVariables,\n  LaunchProfileProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, LaunchProfileQuery, LaunchProfileQueryVariables, LaunchProfileProps<TChildProps>>(LaunchProfileDocument, {\n      alias: 'launchProfile',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLaunchProfileQuery__\n *\n * To run a query within a React component, call `useLaunchProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchProfileQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useLaunchProfileQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LaunchProfileQuery, LaunchProfileQueryVariables>) {\n        return ApolloReactHooks.useQuery<LaunchProfileQuery, LaunchProfileQueryVariables>(LaunchProfileDocument, baseOptions);\n      }\nexport function useLaunchProfileLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LaunchProfileQuery, LaunchProfileQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<LaunchProfileQuery, LaunchProfileQueryVariables>(LaunchProfileDocument, baseOptions);\n        }\nexport type LaunchProfileQueryHookResult = ReturnType<typeof useLaunchProfileQuery>;\nexport type LaunchProfileLazyQueryHookResult = ReturnType<typeof useLaunchProfileLazyQuery>;\nexport type LaunchProfileQueryResult = ApolloReactCommon.QueryResult<LaunchProfileQuery, LaunchProfileQueryVariables>;","import * as React from 'react'\nimport { LaunchListQuery } from '../../generated/graphql'\nimport './styles.css'\n\nexport interface OwnProps {\n  handleIdChange: (newId: number) => void\n}\n\ninterface Props extends OwnProps {\n  data: LaunchListQuery;\n}\n\nconst className = 'LaunchList'\n\nconst LaunchList: React.FC<Props> = ({ data, handleIdChange }) => (\n  <div className={className}>\n    <ol className={`${className}__list`}>\n      {!!data.launches &&\n        data.launches.map(\n          (launch, i) =>\n          !!launch && (\n            <li\n              key={i}\n              className={`${className}__item`}\n              onClick={() => handleIdChange(launch.flight_number!)}\n            >\n              {launch.mission_name} ({launch.launch_year})\n            </li>\n          ),\n        )}\n    </ol>\n  </div>\n)\n\nexport default LaunchList","import * as React from 'react'\nimport { useLaunchListQuery } from '../../generated/graphql'\nimport LaunchList from './LaunchList'\n\nimport {OwnProps} from './LaunchList'\n\nconst LaunchListContainer = (props:OwnProps) => {\n  const { data, error, loading } = useLaunchListQuery()\n\n  if (loading) {\n    return <div>Loading...</div>\n  }\n\n  if (error || !data) {\n    return <div>ERROR</div>\n  }\n\n  return <LaunchList data={data} {...props} />\n}\n\nexport default LaunchListContainer","import * as React from 'react'\nimport { LaunchProfileQuery } from '../../generated/graphql'\nimport './styles.css'\n\ninterface Props {\n  data: LaunchProfileQuery;\n}\n\nconst className = 'LaunchProfile';\n\nconst LaunchProfile: React.FC<Props> = ({ data }) => {\n  if (!data.launch) {\n    return <div>No launch available</div>\n  }\n\n  return (\n    <div className={className}>\n      <div className={`${className}__status`}>\n        <span>Flight {data.launch.flight_number}: </span>\n        {data.launch.launch_success ? (\n          <span className={`${className}__success`}>Success</span>\n        ) : (\n          <span className={`${className}__failed`}>Failed</span>\n        )}\n      </div>\n      <h1 className={`${className}__title`}>\n        {data.launch.mission_name}\n        {data.launch.rocket &&\n          ` (${data.launch.rocket.rocket_name} | ${data.launch.rocket.rocket_type})`}\n      </h1>\n      <p className={`${className}__description`}>{data.launch.details}</p>\n      {!!data.launch.links && !!data.launch.links.flickr_images && (\n        <div className={`${className}__image-list`}>\n          {data.launch.links.flickr_images.map(image =>\n            image ? <img src={image} className={`${className}__image`} key={image} alt=\"Rocket\" /> : null,\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default LaunchProfile","import * as React from 'react'\nimport { useLaunchProfileQuery } from '../../generated/graphql'\nimport LaunchProfile from './LaunchProfile'\n\ninterface OwnProps {\n  id: number;\n}\n\nconst LaunchProfileContainer = ({ id }: OwnProps) => {\n  const { data, error, loading, refetch } = useLaunchProfileQuery({\n    variables: { id: String(id) },\n  })\n\n  React.useEffect(() => {\n    refetch()\n  }, [id])\n\n  if (loading) {\n    return <div>Loading...</div>\n  }  \n  \n  if (error) {\n    return <div>ERROR</div>\n  }  \n  \n  if (!data) {\n    return <div>Select a flight from the panel</div>\n  }\n\n  return <LaunchProfile data={data} />\n}\n\nexport default LaunchProfileContainer","import React from 'react'\nimport LaunchList from './components/LaunchList'\nimport LaunchProfile from './components/LaunchProfile'\nimport './App.css'\n\nconst App = () => {\n  const [id, setId] = React.useState(42)\n  const handleIdChange = React.useCallback(newId => {\n    setId(newId)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <LaunchList handleIdChange={handleIdChange} />\n      <LaunchProfile id={id}/>\n    </div>\n  )\n}\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks'\nimport './index.css';\nimport App from './App';\n\nconst client = new ApolloClient({\n  uri: 'https://spacexdata.herokuapp.com/graphql',\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <App />\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById('root'),\n)\n\n\n"],"sourceRoot":""}